# 服务器配置
server:
  servlet:
    context-path: /spring-oxygen # context
  port: 8888

# spring-config
spring:

  # 使用配置文件 java -jar app.jar --spring.profiles.active=dev
  profiles:
    active: dev
    include:
      - default
      - oxygen
      - cloud

  # 应用信息
  application:
    name: ispong-oxygen

  # 国际化配置
  messages:
    always-use-message-format: true # 是否一直使用消息模板
    basename: messages,config.i18n.messages # 名字
    cache-duration:   # 国际化文件路径
    encoding: UTF-8 # 编码
    fallback-to-system-locale: false # 如果调用失败是否使用本地默认
    use-code-as-default-message: true # 是否使用默认消息

  # jackson解析工具配置  jackson使用对象一定要有无参构造函数
  jackson:
    locale: zh_CN # 设置本地时区
    time-zone: GMT+8 # 时区设置
    date-format: yyyy-MM-dd HH:mm:ss # data转string的时间格式设置,读取时的时间格式 yyyy-MM-dd'T'HH:mm:ss.SSSZ

  # servlet
  servlet:
    multipart:
      enabled: true # 开启文件上传
      max-file-size: 3MB # 上传最大文件大小
      max-request-size: 3MB # 上传最大请求体大小

  # spring-devtools
  devtools:
    add-properties: false
    restart:
      enabled: true
      log-condition-evaluation-delta: false
      additional-paths: src
      additional-exclude: spring-oxygen
      exclude: docs/**,**/*Test.class
      poll-interval: 1s
      quiet-period: 100ms
      trigger-file: .reloadtrigger
    livereload:
      enabled: true
      port: 35729
    remote:
        restart:
          enabled: true
        proxy:
          host: localhost
          port: 8888
        context-path: /ispong-deploy
        secret: secrectKey
        secret-header-name: X-AUTH-TOKEN

  # spring-mail
  mail:
    host: smtp.qq.com # 邮箱服务器地址
    port: 465 # 邮箱服务器端口号
    username: ENC@[4FmaVNBbiNyVZEF2cDBwGml4ufMnYB6wEMHrBTDPg8MdYWUPlgV0uRyqwfttlaIOA6jl8DpSABXJO7QBVBbkWQ==] # 邮箱账号
    password: ENC@[bc4ClJDP6nX+XWTtZkBbXPCBlOvTqaWIVogQebWagYJCAO1WBZE2qkTstMp859nCrumGTxboQpNhywo75hPIFQ==] # 邮箱密码
    default-encoding: UTF-8 # 邮件字符集
    protocol: smtp # 邮件发送协议
    test-connection: false # 是否进行连接测试
    properties:
      mail.smtp.ssl.enable: true # 启动ssl协议访问
      mail.smtp.connectiontimeout: 10000 # 设置连接超时
      mail.smtp.timeout: 10000 # 设置超时
      mail.smtp.writetimeout: 10000 # 设置写入超时

  # spring-dataSource
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:~/h2
    username: root
    password: root
    initialization-mode: never # 初始化数据库方式
    schema: classpath:db/schema.sql # 初始化数据库表结构
    data: db/data.sql # 初始化数据库原始数据
    # ali druid
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: org.h2.Driver
      url: jdbc:h2:~/h2
      username: root
      password: root
      filters: stat,wall # 监控统计:stat 日志:log4j 防御sql注入:wall
      initial-size: 5 # 初始化连接池数量
      min-idle: 5 # 最小连接池数量
      max-active: 20 # 最大连接池数量
      max-wait: 10000 # 等待超时的时间
      time-between-eviction-runs-millis: 60000 # 间隔多久执行一次检测
      min-evictable-idle-time-millis: 300000 # 连接保持空闲而不被驱逐的最小时间
      max-evictable-idle-time-millis: 900000 # 连接保持空闲而不被驱逐的最大时间
      validation-query: SELECT 1 # 用来检测连接是否有效的sql
      validation-query-timeout: 10000 # 测试超时时间设置
      test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
      test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      pool-prepared-statements: false # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      max-pool-prepared-statement-per-connection-size: 100 # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      keep-alive: true # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      # 配置druid监控页面 http://localhost:8888/spring-oxygen/druid/index.html
      stat-view-servlet:
        enabled: true # 是否开始监控界面
        url-pattern: /druid/* # 设置页面访问地址
        reset-enable: true # 是否允许重置druid的统计信息
        allow: 127.0.0.1 # ip白名单
        deny: 127.0.0.2 # ip黑名单

  # h2-config
  # http://localhost:8888/spring-oxygen/h2-console
  h2:
    console:
      enabled: true # 是否开启h2
      path: /h2-console # 访问地址
      settings:
        trace: false # 是否打印详细trace
        web-allow-others: true # 允许页面访问

  # spring-security
  security:
    user:
      name: admin
      password: admin
      roles: OXYGEN_ADMIN

  # spring-quartz
  quartz:
    scheduler-name: quartzScheduler # 定时器名称
    auto-startup: true # 初始化后是否自动启动
    job-store-type: jdbc # job存储方式
    jdbc:
      schema: classpath:db/quartz_h2.sql # sql执行脚本
      comment-prefix: '#, --' # sql语句中的注释
      initialize-schema: embedded # 初始化数据库方式 embedded(不会重复初始化) always(每次都会初始化)
    startup-delay: 0s # 启动延迟时间
    overwrite-existing-jobs: false # 是否覆盖已存在job
    wait-for-jobs-to-complete-on-shutdown: false # 是否在关闭时等待job执行完毕
    properties:
      org:
        quartz:
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 20
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: false

# spring-logging
logging:
  group:
    ispong:
      - com.ispong.oxygen.websockets
      - com.ispong.oxygen.wechatgo
      - com.ispong.oxygen.flysql
      - com.ispong.oxygen.freecode
  level:
    root: info
    ispong : debug
  file:
    name: logs/spring.log
    max-size: 10MB
    max-history: 30
    total-size-cap: 100MB #
    clean-history-on-start: false
  exception-conversion-word: '%wEx'
  pattern:
    level: '%5p'
    dateformat: 'yyyy-MM-dd HH:mm:ss.SSS'
    console: '%clr(%d{${LOG_DATEFORMAT_PATTERN}}){faint} %clr(${LOG_LEVEL_PATTERN}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD}'
    file: '%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %-5(${PID:- }) --- [%15.15t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD}}'
    rolling-file-name: '${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz'
  register-shutdown-hook: false

# jasypt
jasypt:
  encryptor:
    property:
      prefix: "ENC@[" # 标识前缀
      suffix: "]" # 标识后缀
    bean: customJasyptStringEncryptor # 使用自定义加密规则

# spring-actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    logfile:
      enabled: true
    health:
      show-details: always
    metrics:
      enabled: true
